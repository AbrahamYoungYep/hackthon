/**
 * Created by 志磊 on 2016/5/9.
 */

import java.util.Random;
import java.util.Scanner;

public class SweepMine {
    public void SetBomb(int k, int bombNum, int[][] index) {
        Random rand = new Random();
        for (int i = 0; i < bombNum; ++i) {
            int randNumX = rand.nextInt(k);
            int randNumY = rand.nextInt(k);
            if (index[randNumX][randNumY] != 9) {
                index[randNumX][randNumY] = 9;
            } else {
                --i;
            }
        }
    }

    public boolean Clean(int k, int[][] toCheck) {
        for (int a = 0; a < k; a++) {
            for (int b = 0; b < k; b++) {
                if (toCheck[a][b] != 0)
                    return true;
            }
        }
        return false;
    }

    public void Display(int k, char[][] square, int[][] index) {
        for (int i = 0; i < k; i++) {
            if (i == 0) {
                for (int ii = 0; ii <= k; ii++) {
                    if (ii < 10) {
                        System.out.print(ii + "  ");
                    } else {
                        System.out.print(ii + " ");
                    }
                }
                System.out.println();
            }
            if (i < 9) {
                System.out.print(i + 1 + "  ");
            } else {
                System.out.print(i + 1 + " ");
            }

            for (int j = 0; j < k; j++) {
                if (square[i][j] != 164) {
                    System.out.print(square[i][j] + "  ");
                } else {
                    System.out.print(square[i][j] + " ");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] arg) {
        SweepMine c = new SweepMine();
        System.out.println("请选择难度：1.简单(10*10 10%)\t" +
                "2.一般(20*20 20%)\t3.困难(30*30 30%)\t" + "9.自定义难度");
        Scanner input = new Scanner(System.in);
        int k = input.nextInt() * 10;
        if (k == 90) {
            while (k > 0) {
                System.out.println("(行列数为n*n，难度系数n%)");
                System.out.println("请输入行列数n (n>10)：");
                k = input.nextInt();
                if (k < 10) {
                    System.out.println("输入数字过小，请重新输入：");
                } else {
                    break;
                }
            }
        }
        char square[][] = new char[k][k];
        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < k; ++j) {
                square[i][j] = 164;
            }
        }
        int index[][] = new int[k][k];
        double temp = k;
        int bombNum = (int) Math.pow(temp / 10, 3) * 10;
        int bombSweeped = 0;
        c.SetBomb(k, bombNum, index);

        int count;
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                if (index[i][j] != 9) {
                    count = 0;
                    for (int x = i - 1; x < i + 2; x++) {
                        for (int y = j - 1; y < j + 2; y++) {
                            if (x > -1 && y > -1 && x < k && y < k && index[x][y] == 9) {
                                count++;
                            }
                        }
                    }
                    index[i][j] = count;
                }
            }
        }

        System.out.println("输入*进入插旗模式, 输入/进入撤销插旗模式");
        while (true) {  //正式游戏

            c.Display(k, square, index);
            int i = 0, j;
            System.out.println("请输入清扫点坐标或模式指令");
            String str = input.next();
            char Char = str.charAt(0);

            if (Char == '*') {  //插旗
                int x = input.nextInt() - 1;
                int y = input.nextInt() - 1;
                square[x][y] = '!';
                if (index[x][y] == 9) {
                    bombSweeped++;
                    if (bombSweeped == bombNum) {
                        System.out.println("You win!");
                        return;
                    }
                } else {
                    continue;
                }
            } else if (Char == '/') {
                int x = input.nextInt() - 1;
                int y = input.nextInt() - 1;
                square[x][y] = (char) 164;
            } else if (Char >= '0' && Char <= '9') {
                i = Char - 49;  //Char - 48 - 1
            } else {
                continue;
            }
            j = input.nextInt() - 1;
            if (index[i][j] == 9) {
                square[i][j] = '*';
                c.Display(k, square, index);
                System.out.println("You Died!");
                return;
            } else if (index[i][j] != 9 && index[i][j] != 0) {
                square[i][j] = (char) (index[i][j] + 48);
            }

            int[][] toCheck = new int[k][k];
            int[][] checked = new int[k][k];
            if (index[i][j] == 0 && checked[i][j] == 0) {
                toCheck[i][j] = 1;
            }

            while (c.Clean(k, toCheck)) {
                for (int n = 0; n < k; n++) {
                    for (int m = 0; m < k; m++) {
                        if (toCheck[n][m] != 0) {
                            for (int x = n - 1; x < n + 2; x++) {
                                for (int y = m - 1; y < m + 2; y++) {  //检查周围八个格子
                                    if (x > -1 && y > -1 && x < k && y < k &&
                                            index[x][y] == 0 && checked[x][y] == 0) {
                                        toCheck[x][y] = 1;
                                        toCheck[n][m] = 0;
                                        square[n][m] = '0';
                                        checked[n][m] = 1;
                                    } else if (x > -1 && y > -1 && x < k && y < k &&
                                            index[x][y] != 0) {
                                        square[x][y] = (char) (index[x][y] + 48);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
